import java.math.BigInteger;


public class LoopExamples {
	private static final double DELTAT = 0.01;
	private static final double GRAVITY = 9.81;

	public static BigInteger factorial(int start)
	{
		final int starter = start;
		String str = "" + start;
		BigInteger factorial = new BigInteger(str);
		BigInteger operator = new BigInteger(str);
		
		while(start > 1)
		{
			operator = operator.subtract(BigInteger.ONE);
			start = --start;
			factorial = factorial.multiply(operator);	
		}
		if(start == 0)
		return 1;
		
		return factorial;
	}
	public static void printArea(double minWidth, double maxWidth,  double minLength, double maxLength)
	{
		double startMinWidth = minWidth;
		double startMinLength = minLength;
		System.out.printf("%-10s %-10s %-10s %n", "length", "width", "area");
		System.out.println("------------------------------");
		for(;minLength < maxLength + 1; minLength++)
		{
			for(;minWidth < maxWidth + 1; minWidth++)
			{
				System.out.printf("%-10s %-10s %-10s %n", minLength, minWidth, (minLength * minWidth)); //prints in pretty collumns
				System.out.println("------------------------------");
			}
			minWidth  = startMinWidth; //resets minWidth to repeat with other lengths
		}
	}

	public static double updateVelocity(double currentVelocity)
	{
	return currentVelocity - (GRAVITY * DELTAT);
	}
	
	public static double updateHeight(double currentHeight, double currentVelocity)
	{
	return currentHeight + (currentVelocity * DELTAT);
	}
	
	public static void simulation(double initialVelocity)
	{
		double time = 0;
		double initialHeight = 0;
		double currentHeight = initialHeight;
		double currentVelocity = initialVelocity;
		System.out.printf("%-6s %20s %18s %n", "Time", "Initial Velocity", "Current Height");
		System.out.printf("%-10.2f %-20.2f %-20.2f %n", time, initialVelocity, currentHeight);
		do{
				for(int i = 0; i < 101; i++){
			currentVelocity = updateVelocity(currentVelocity);
			currentHeight = updateHeight(currentHeight, currentVelocity);
					}
			time++;
			if(currentHeight > 0)
			System.out.printf("%-10.2f %-20.2f %-20.2f %n", time, currentVelocity, currentHeight);

	}while(currentHeight >  0);
	}

	public static void main(String[] args) {
		simulation(100);

	}
}

