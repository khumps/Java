
public class MixedNumber {
	
	private int numerator;
	private int denominator;
	private int whole;
	private int opNumerator;
	private int opDenominator;
	
	/*
	 * Creates a MixedNumber given a mixed number
	 */
	public MixedNumber(int whole, int numerator, int denominator) 
	{
		this.whole = whole;
		this.numerator = numerator;
		this.denominator = denominator;
		this.opNumerator = (whole * denominator) + numerator;
		this.opDenominator = denominator;
	}
	
	/*
	 * Creates a MixedNumber given an improper fraction
	 */
	public MixedNumber(int numerator, int denominator)
	{
		this.whole = numerator / denominator;
		this.numerator = numerator % denominator;
		this.denominator = denominator;
		this.opNumerator = numerator;
		this.opDenominator = denominator;
	}
	
	/*
	 * Creates a MixedNumber given a whole number
	 */
	public MixedNumber(int whole){
		
		this.whole = whole;
		this.numerator = 0;
		this.denominator = 0;
	}
	
	public MixedNumber(Fraction fraction)
	{
		int gcd = Fraction.gcd(fraction.getNumerator(), fraction.getDenominator());
		this.opNumerator = fraction.getNumerator() / gcd;
		this.opDenominator = fraction.getDenominator() / gcd;
		
		this.whole = fraction.getNumerator() / fraction.getDenominator();
		this.numerator = fraction.getNumerator() % fraction.getDenominator();
		this.denominator = fraction.getDenominator();
		gcd = Fraction.gcd(this.numerator, this.denominator);		
		
		this.numerator /= gcd;
		this.denominator /= gcd;
	}
	
	public MixedNumber addMixed(MixedNumber mixed)
	{
		int newNumerator;
		int newDenominator;
		int top1 = this.getOpNumerator();
		int top2 = mixed.getOpNumerator();
		int bottom1 = this.getOpDenominator();
		int bottom2 = mixed.getOpDenominator();
		if(bottom1 == bottom2)
		{
			newNumerator = top1 + top2;
			newDenominator = bottom1;
		}
		else
		{
		newNumerator = (top1 * bottom2) + (top2 * bottom1);
		newDenominator = bottom1 * bottom2;
		}
		MixedNumber newMixed =  new MixedNumber(newNumerator, newDenominator);
		return newMixed;
		
	}
	
	public int getOpNumerator() {
		return opNumerator;
	}

	public void setOpNumerator(int opNumerator) {
		this.opNumerator = opNumerator;
	}

	public int getOpDenominator() {
		return opDenominator;
	}

	public void setOpDenominator(int opDenominator) {
		this.opDenominator = opDenominator;
	}

	public MixedNumber subtractMixed(MixedNumber mixed)
	{
		int newNumerator;
		int newDenominator;
		int top1 = this.numerator;
		int top2 = mixed.getNumerator();
		int bottom1 = this.denominator;
		int bottom2 = mixed.getDenominator();

		newNumerator = (top1 * bottom2) - (top2 * bottom1);
		newDenominator = bottom1 * bottom2;
		
		
		MixedNumber newMixed =  new MixedNumber(newNumerator, newDenominator);
		return newMixed;
	}
	
	public int getNumerator() {
		return numerator;
	}

	public void setNumerator(int numerator) {
		this.numerator = numerator;
	}

	public int getDenominator() {
		return denominator;
	}

	public void setDenominator(int denominator) {
		this.denominator = denominator;
	}

	public int getWhole() {
		return whole;
	}

	public void setWhole(int whole) {
		this.whole = whole;
	}

	public MixedNumber multiplyMixed(MixedNumber mixed)
	{
		int top1 = this.opNumerator;
		int top2 = mixed.getOpNumerator();
		int bottom1 = this.opDenominator;
		int bottom2 = mixed.getOpDenominator();
		int newNumerator = top1 * top2;
		int newDenominator = bottom1 * bottom2;
		MixedNumber newMixed =  new MixedNumber(newNumerator, newDenominator);
		return newMixed;
		
	}
	
	public MixedNumber divideMixed(MixedNumber mixed)
	{
		int top1 = this.opNumerator;
		int top2 = mixed.getOpNumerator();
		int bottom1 = this.opDenominator;
		int bottom2 = mixed.getOpDenominator();
		int newNumerator = top1 * bottom2;
		int newDenominator = bottom1 * top2;
		MixedNumber newMixed =  new MixedNumber(newNumerator, newDenominator);
		return newMixed;
		
	}
	public String toString()
	{
		String mixed = whole + " " + numerator + "/" + denominator;
		return mixed;
	}
}
